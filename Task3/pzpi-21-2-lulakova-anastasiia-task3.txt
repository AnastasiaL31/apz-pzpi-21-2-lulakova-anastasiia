1 МОДЕЛЮВАННЯ  ПРОГРАМНОЇ СИСТЕМИ
1.1	Мета роботи


Метою лабораторної роботи є розробка програмного забезпечення для IoT пристою, що є частиною системи управління притулком, опис прийнятих інженерних рішень, побудова діаграм. Необхідно представити будову системи та її взаємодію з іншими частинами системи.


1.2	Моделювання програмної системи


	Для розгляду функціональності було створено декілька Use-Case діаграм для разних ролей системи. Є 2 ролі: сам сенсор (його функціонал) та роль користувача системи, що може адмініструвати IoT пристрій. Для розгляду функціональності самого програмного забезпечення наведено Use-Case діаграму 1 (додаток А, рис. А1). На ній можна побачити, що сенсор має обчислювальну функціональність (обчислення індексу теплового стресу та прогнозування вживання води), функціонал для взаємодії з серверною частиною (функції для POST та GET запитів), які в тому числі використовуються для адміністрування (частоти відправки даних), функціонал для вибору підключеного датчика, функція для отримання часу в універсальному форматі UTC, метод для повідомлення користувача про критичні показники. 
У працівника притулку є доступ до системи за допомогою мобільного або веб додатку, є можливість адміністрування сенсору. Це відображено на Use-Case діаграмі 2 (додаток А, рис. А2), а саме: перегляд даних сенсору, встановлення частоти надсилання даних. 
Повний цикл роботи системи можна описати наступним чином:
1.	Користувач при першому використанні системи повинен локально підключитися до контролеру для налаштувань мережі. 
2.	Після підключення до мережі система робить запит до серверної частини для отримання частоти надсилання даних. Якщо не вдається встановити зв’язок з сервером, то буде використовуватися частота за замовченням – 1 година. Весь етап налаштувань можно розглянути на діаграмі активності (додаток А, рис. А3).
3.	Починається функціонал, що буде відтворюватись з частотою 5 хвилин. До цього входить: отримання даних з сенсорів, розрахунок індексу теплового стресу та прогнозування, отримання часу в форматі UTC, а надсилання даних на сервер відбувається з отриманою чатсотою з серверу. 
4.	При отриманні та обробці даних спочатку отримуються показники сенсору, температура в градусах Цельсія, відносна вологість у відсотках, маса води та їжі у грамах. На основі цих даних розраховується індекс теплового стресу, що  використовується для оцінки ризику теплового стресу у тварин та прогнозування вживання води, що є коефіцієнтом, який залежить від температури.
5.	Якщо при ітерації вирахований на основі нових даних індекс теплового стресу буде високий, то надсилається запит на сервер з цим індексом для обробки, а також при високих або низьких показниках температури або вологості внепланово будуть надсилатися дані на сервер для додаткової перевірки. Весь процес обробки даних наведено на діаграмі активності (додаток А, рис. А4).
6.	Отримані та оброблені дані надсилаються на серверну частину з частотою, вказаною користувачем, але самі дані з сенсорів отримуються та перевіряються кожні 5 хвилин. Цикл повторюється, поки систему не буде відключено від живлення.


1.3	Взаємодія між частинами системи


Взаємодія програмного забезпечення з іншими частинами системи буде відбуватися через серверну частину, до якої було додано додаткові методи: отриманя інформації про частоту надсилання даних та зміни цієї частоти (за замовченням складає 1 годину), метод для надсилання повідомлення користувачу про критичні показники (досягнення умов завищених або занижених температури або вологості, високого індексу теплового стресу). 
В якості прикладу взаємодії було створено діаграму взаємодії на основі діаграми активності щодо обробки даних (додаток А, рис. А5). На цій діаграмі можна докладніше поглянути на послідовність дій самої програми та як відбувається взаємодія з серверною частиною.


2	ПРОГРАМНА РЕАЛІЗАЦІЯ 
2.1 Архітектура програмної системи


Програмне забезпечення для пристрою IoT було розроблено на мові програмування С++ у симуляторі Wokwi. Для відтворення фізичної системи було використано мікроконтроллер Arduino ESP32, які має можливість підключення до мережі та виходу в Інтернет, що необхідно для взаємодії з серверною частиною, сенсор DHT22 для підрахунку вологості та температури, аналоговий сенор температури NTC для демонстрації можливості підключення різного обладнання до системи, а також потенціометри для регулювання та встановлення кількості їжі та води (функціонал симулятора обмедений та немає сенсорів для вимірювання ваги). 
В програмі використовуються HTTP-запити для взаємодії з серверною частиною, бібліотеки HTTpClient для реалізації запитів, NTCClient для роботи з часом, ArduinoJson для обробки відповіді з серверної частини.


2.2 Програмна розробка системи


Перед початком написання коду було створено схему для фізичного розміщення частин системи: контроллера та сенсорів (додаток А, рис. А6).
Принцип підключення до контролера наступний: якщо сенсор DHT22 буде використовуватися для виміру і температури, і вологості, то його необхідно підключати до піна D15, якщо ж для виміру температури буде використовуватися інший сенсор, то DHT22 необхідно підключати до піна D18 (всі підключення відбуваються з виходу SDA). Інші виходи сенсора потрібно підключати так: VCC до 3V3, GND до GND. Також сенсорі для води та їжі, потенціометри, що замінюють сенсори вимірювання маси в симуляторі, підключаються до пінів для вхідних даних, тобто D34 та D35.
В якості альтернативного сенсора для вимірювання температури використовується аналоговий сенсор NTC, який необхідно підключити до піна D39 (VN), всі інші підключення – аналогічно до сенсору DHT22.  
Після створення схеми починається написання коду. Спочатку оголошуються глобальні змінні, що повинні бути доступні в усіх методах програми. Це змінні показників сенсорів та розраховуємих показників, номери пінів, параметри мережі, частота, HTTP та NTP клієнти, адреса серверної частини. 
В методі setup() відбувається налаштування системи. Спочатку аналізуються піни та чи підключені до них датчики, після чого починаються спроби підключитися до мережі.
1	void setup() {
2	  Serial.begin(9600);
3	
4	  if(digitalRead(DHT_PIN_Hum) == HIGH){
5	    analogReadResolution(10);
6	    pinMode(NTC_PIN,INPUT);
7	    isNTC = 1;
8	    DHT_PIN = DHT_PIN_Hum;
9	    Serial.println("NTC is connected!");
10	  }
11	  dhtSensor.setup(DHT_PIN, DHTesp::DHT22);

 Як можна побачити, у строках 4-9 обирається сенсор, який буде використовуватися для виміру температури. Сенсор DHT22 підключається в будь-якому випадку (рядок 11), тому що в симуляторі, який використовується, не має інших сенсорів для виміру вологості.
Сенсор не почне працювати, поки не зможе підключитися до мережі.
12	 Serial.begin(115200);
13	  pinMode(WATER_PIN, INPUT);
14	  pinMode(FOOD_PIN, INPUT);
15	  Serial.print("Connecting to WiFi");
16	  WiFi.begin(SSID, Password);
17	  while (WiFi.status() != WL_CONNECTED) {
18	    delay(100);
19	    Serial.print(".");
20	  }
21	  Serial.println(" Connected!");
22	  Serial.print("OK! IP=");
23	  Serial.println(WiFi.localIP());
24	  
25	  getDataFrequency();
26	  timeClient.begin();
27	  timeClient.setTimeOffset(0);
28	}

У рядках 13-14 підключаються сенсори для води та їжі, далі у 15-19 відбувається підключення до мережі кожні 100 мілісекунд. Сенсор не почне працювати, поки не створиться з’єднання. 
Після підключення починається робота з сервером: сенсор запитує дані про частоту надилання даних (рядок 25). Наприкінці методу запускається NTP клієнт для роботи з часом в формати UTC (рядки 26-27). Докладний процес налаштування також наведено на діаграмі станів (додаток А, рис. А7).
Весь функціонал в методі loop() буде відбуватися доти, поки контролер не буде вимкнено, з частотою 5 хвилин, а дані будуть надсилатися на сервер з частотою, що була отримана від серверної частини. Спочатку викликається метод для отримання даних сенсора. Також в цьому методі аналізуються отримані дані та викликається метод для відправки повідомлення користувачу. Якщо пройшов час, частота, отримана з серверу, то при цій ітерації викликається метод sendPostRequest(), який використовується для відправки розрахованих та оброблених даних на сервер. Наприкінці викликається метод delay(), в який передається частота повторів циклу.
 Код методу sendPostRequest() наведено в додатку А. В строках 5-6 створюється адреса, по якій необхідно робити POST-запит, у рядку 7 запускається HTTP-клієнт по цій адресі. Створюється JSON об’єкт  у вигляді строки з усіма зібраними та розрахованими даними (рядки 8-18), після чого відправляється запит (рядок 19). Після чого у рядках 20-27 оброблюється відповідь сервера.


2.3 Висновки


Впродовж цієї лабораторної роботи мною було розроблено програмне забезпечення для пристрою IoT, що є частиною системи управління притулком, описано архітектуру системи, програмну реалізацію, описано фізичну схему, її взаємодію з іншими частинами системи,  розроблено діаграми. 


ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ


1.	Посилання на репозиторій з кодом:  https://github.com/NureLulakovaAnastasiia/apz-pzpi-21-2-lulakova-anastasiia/tree/main/Task3 
2.	Посилання на відеозапис: https://youtu.be/XmgqVosFihg 
3.	Посилання на проект у симуляторі Wokwi:        https://wokwi.com/projects/395484583539104769  


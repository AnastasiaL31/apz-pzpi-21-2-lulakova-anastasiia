1 МОДЕЛЮВАННЯ  ПРОГРАМНОЇ СИСТЕМИ
1.1	Мета роботи


Метою лабораторної роботи є розробка серверної частини для системи управління притулком для тварин, опис прийнятих інженерних рішень, побудова діаграм. Необхідно представити архітектуру системи та структуру бази даних.


1.2	Моделювання програмної системи


	Для розгляду функціональності було створено декілька Use-Case діаграм для разних ролей системи. 
В системі взагалі є декілька ролей: адміністратор (директор), лікар, відповідальний за постачання. Функціонал адміністратора включає доступ до всіх можливостей інших ролей та управління персоналом (наведено на Use-Case діаграмі 2, рис. А2). Він також має повний доступ до бази даних та найвищі права для роботи з нею, тобто створювати, редагувати, видаляти (однак не може видалити саму базу даних) таблиці, дані, може додавати нових користувачів.
Далі можна розглянути Use-Case діаграму для лікаря (наведено у додатку А, рис А1). На діаграмі можна побачити одного діючого актора – лікаря, що має можливість керувати хворобами та медичними процедурами тварини, вказувати розходні матеріали для процедур, розраховувати та змінювати план харчування тварин та оновлювати інформацію про тварину. Також є можливість робити замовлення на необхідні матеріали (ця можливість доступна всім ролям в системі).
Роль відповідального за постачання включає в себе оформлення замовлень, прийом заявок від персоналу та поповнення воль’єрів. Цей функціонал наведено на Use-Case діаграмі 3 (додаток А, A1, рис А3). 
Для моделювання бізнес-процесів та опису послідовності дій користувача з різними ролями було створено декілька діаграм активності. Розглянемо першу діаграму активності дій з працівниками (додаток А,  рис А4). На цій діаграмі наведено можливі функції та дії адміна (директора) з працівниками: перегляд даних працівника, зміна ролі. Для всіх змін адміністратору необхідно підтверджувати особистість за допомогою вводу паролю та пройти перевірку на рівень доступу.
Лікар може переглядати медичну картку тварини, додавати нові дані про хвороби, відповідні до них медичні процедури та розходні матеріали цих процедур. Цей функціонал можна подивитися на діаграмі активності для дій лікаря з хворобами (додаток А, рис А5).
Одна з основних функціональностей зосереджена у діях користувача з тваринами. Користувач може переглядати список існуючих тварин або приймати нових, переглядати детальну інформацію про них, редагувати її, поміщювати або переміщувати у воль’єр,  виставляти необхідні умови для воль’єру, переглядати дані, надані сенсором щодо деяких показників (температура, вологість, прогнозування, рівень води та їжі), видаляти тварин. Це можна побачити на наведеній діаграмі активності щодо дій з тваринами (додаток А, рис А6).


1.3	Моделювання бази данних


Проаналізувавши функціонал системи, можна визначити декілка основних об’єктів системи, а саме: працівник, його завдання, тварини, їх раціон їжі, їх хвороби та медичні процедури, воль’єр та його умови, поповнення воль’єру, сенсор та дані сенсору, сховище та замовлення на покупку, а також визначити логічні зв’язки між ними: у тварини може бути декілька прийомів їжі, декілька хвороб та медичних процедур, один воль’єр, у воль’єра один сенсор, одна умова та безліч поповнень,  у сенсора може бути безліч данних, тобто тих, що надсилає пристрій IoT, у медичних процедур будь скільки розходних матеріалів. У працівника може бути будь-яка кількість завдань та замовлень. На основі цих даних була побудована ER-діаграма (додаток А, рис А7) з декількома видів зв’язків: один-до-багатьох (тварина-хвороба, тварина- мед процедура, тварина-прийом їжі, процедура-матеріали, сенсор-дані сенсора, воль’єр-поповнення вольєру, працівник-завдання, працівник-замовлення), один-до-одного (воль’єр-умови, користувач-працівник).

 
2	ПРОГРАМНА РЕАЛІЗАЦІЯ СЕРВЕРНОЇ ЧАСТИНИ
2.1 Архітектура програмної системи


Серверна частина розроблена з використанням технології ASP.Net Core. Демонстрація працездатності та тестування виконується за допомою OpenApi (Swagger), що стоїть по замовченню при розробці проекту Web Api ASP.Net Core у Visual Studio 2022.
Серверна частина використовує захищений протокол HTTPS, базу данних Azure SQL. База даних та серверна частина розвернута на сервісі Azure. Система використовує модель клієнт-сервер: сервер надає послуги декільком клієнтам, які в свою чергу ініціюють запити серверу.
Система працює через HTTP запити для виконання стандартних функцій бази даних (створення, видалення, читання, редагування): GET-метод для отримання інформації, DELETE-метод для видалення запису, POST-метод для створення нового запису, PUT-метод для оновлення запису в базі даних. Серверна частина повертає відповідь на запити в форматі JSON та коди відповіді (200 – успіх, 400 – незрозумілий запит, 404 – не знайдено, 500 – неможливість обробки сервером). Специфікація наведена у додатку Б.
Принцип взаємодії серверної частини з іншими частинами системи наведено на діаграмі розгортання (додаток А, рис А8). На ній можна подивитися, як частини всього проекту взаємодіють між собою, які технології та протоколи використовуються.


2.2 Програмна розробка системи


На основі ER-діаграми були створені класи-моделі у програмі (наведено 1 клас як приклад, інши моделі створені таким же чином):
1	namespace SmartShelter_WebApi.Models
2	{
3	    public class Aviary
4	    {
5	        public int Id { get; set; }
6	        public string? Description { get; set; }
7	        public int? AnimalId { get; set; }
8	        public int? AviaryConditionId { get; set; }
9	
10	
11	        public Animal Animal { get; set; }
12	        public AviaryCondition AviaryCondition { get; set; }
13	     }
14	}

В наведеному коді можна побачити відповідні поля, які є і в ER-діаграмі, а також поля (рядки 7-8, 11-12) для створення зв’язків у технології Entity Framework Core.
Для всіх об’єктів використовувалась наступна технологія розробки функціональності: створювався інтерфейс, в якому були необхідні методи для роботи з базою даних, далі створювався сервіс, в якому ці методи реалізовувалися. Цей сервіс використовувася у відповідних контроллерах, в яких знаходились основні методи для http-запитів (get, post, put, delete) та налаштовувалась маршрутизація. Також використовувався AutoMapper для сворення об’єкту передачі даних (data transfer object - DTO) для того, щоб не передавати непотрібну для загального користування або конфіденційну інформацію користувачеві.
Всі об’єкти, які представляють собою таблиці бази данних, знаходяться в класі DataContext. В цьому класі в якості полей і є об’єкти таблиць, також є метод для створення цих таблиць, створення зв’язків між ними, заповнення початковими даними. Екземпляр цього об’єкту буде використовуватись в реалізаціях сервісів кожної моделі.
Далі для прикладу буде наводитись частина коду сервісу тварин. Інтерфейс з методами для тварин (IAnimalService):

1	public interface IAnimalService
2	    {
3	        public List<Animal> GetAll();
4	        public Animal? GetById(int id);
5	        public bool AddAnimal(AddAnimalDto animalDto);
6     	 Jgh    public bool RemoveAnimal(int id);

Реалізація інтерфейсу IAnimalService (AnimalService) наведена в додатку B. В рядках 11-14 наводиться метод отримання всіх тварин. В рядках 16-20 наводиться метод отримання тварини по її ідентифікатору. В рядках 21-27 наведено метод для додавання тварини, в якому за допомогою AutoMapper з об’єкту DTO утворюється об’єкт тварини, що зберігається в базі даних. В рядках 28-39 наведено метод для видалення тварини та її хвороби. 
Далі будуть наведені  декілька реалізацій особливих методів, які відносятся до конкретних об’єктів.
Клас воль’єру AviaryService: метод для отримання поповнень воль’єру по Id:

1	public List<AviaryRecharge>? GetAllRecharges(int id)
2	{
3	   var recharges = _dbContext.AviariesRecharges.Where(x=> x.AviaryId == id).ToList();
4	   return recharges;
5	}

Клас працівників StaffService: метод для отримання даних працівника по його Id, які надаються тільки про себе, або для адміна - всі:

1 public async Task<StaffDto?> GetById(int id, string senderUsername)
2 {
3	 var userId = GetIdentityId(id);
4	 if (userId.IsNullOrEmpty())
5	 {
6	                return null;
7	 }
8	 if (await CheckAccess(userId, "", senderUsername))
9	 {
10	    var user = _dbContext.Staff.FirstOrDefault(x => x.Id == id);
11	    var mappedUser = _mapper.Map<StaffDto>(user);
12	    return mappedUser;
13	 }
14	 return null;
15 }
Клас воль’єру AviaryService, в якому при зміні місця розташування тварини, перевіряється, чи немає в новому воль’єрі іншої тварини, далі тварина переміщується в новий воль’єр, а старий звільняється:

1 public bool ChangeAviary(int animalId, int newAviaryId)
2 {
3	var oldAviary = _dbContext.Aviaries.FirstOrDefault(x => x.AnimalId == animalId);
4	if (oldAviary != null)
5	{
6		oldAviary.AnimalId = null;
7	     _dbContext.Update(oldAviary);
8	}
9	var newAviary = _dbContext.Aviaries.FirstOrDefault(x => x.Id == newAviaryId);
10	if (newAviary != null && newAviary.AnimalId == null)
11	{
12	    newAviary.AnimalId = animalId;
13	}
14	else
15	{
16	    return false;
17	}
18	   return Save();
19 }
Спеціальний клас для авторизації та реєстрації AuthService, що використовує вбудовані механізми .Net Identity для реалізації входу та реєстрації. Наведено метод реєстрації нового користувача:
1	public async Task<bool> RegisterUser(LoginUser user)
2	{
3	   var identityUser = new IdentityUser
4	     {
5	          UserName = user.Username,
6	          Email = user.Username
7	     };
8	            
9	    var result = await  _userManager.CreateAsync(identityUser, user.Password);
10	     return result.Succeeded;
11	}
	
Всі методи репозиторіїв використовуються, відповідно, контроллерах, в  яких реалізовано основні методи API (HTTP-запити): get, put, post, delete. 
Важливо звернути увагу на метод, який потрібен для аналізу показників сенсора (наведено в додатку В). Цей метод використовується для обробки данних і надсилання повідомлень користувачу на електронну пошту. В рядках 3-11 перевіряється існування сенсору та воль’єру, до якого прив’язані дані, потім з бази даних обирається умова рослини (рядок 9), якщо вона існує, то отримані від сенсора дані звіряються з цими умовами, та в процессі складається в сроку відхилення від умов (рядки 19-70). Якщо відхилення було знайдено, то з бази даних береться користувач (рядок 77) та на його електорнну пошту відсилається лист (рядки 78-82). Також окремим методом перевіряється кількість їжі у воль’єрі  відповідно до плану харчування тварини.


2.3 Висновки


Впродовж цієї лабораторної роботи мною було розроблено серверну частину програмної системи по догляду за рослинами, описано архітектуру системи, програмну реалізацію, структуру бази даних, розроблено Use-Case та ER діаграми, діаграми активності та розгортання. 
 
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ


1.	Посилання на архів з кодом: https://github.com/NureLulakovaAnastasiia/apz-pzpi-21-2-lulakova-anastasiia/tree/main/Task2    
2.	Посилання на відеозапис: https://www.youtube.com/watch?v=0H4tKkaA-TQ



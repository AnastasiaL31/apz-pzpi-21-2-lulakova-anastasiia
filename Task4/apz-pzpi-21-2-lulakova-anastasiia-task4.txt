1 МОДЕЛЮВАННЯ  ПРОГРАМНОЇ СИСТЕМИ
1.1	Мета роботи


Метою лабораторної роботи є розробка клієнтської частини програмної системи, що є частиною системи управління притулком для домашніх тварин, опис прийнятих інженерних рішень, побудова діаграм. Необхідно представити будову системи та будову її веб-компонентів.


1.2	Моделювання програмної системи


	Для розгляду функціональності було створено декілька Use-Case діаграм для різних ролей системи. 
В системі взагалі є декілька ролей: адміністратор (директор), лікар, відповідальний за постачання. Функціонал адміністратора включає доступ до всіх можливостей інших ролей та управління персоналом (наведено на Use-Case діаграмі 2, рис. А2). Він також має повний доступ до бази даних та найвищі права для роботи з нею, тобто створювати, редагувати, видаляти (однак не може видалити саму базу даних) таблиці, дані, може додавати нових користувачів, створювати резервну копію бази даних.
Далі можна розглянути Use-Case діаграму для лікаря (наведено у додатку А, рис А1). На діаграмі можна побачити одного діючого актора – лікаря, що має можливість керувати хворобами та медичними процедурами тварини, вказувати розхідні матеріали для процедур, розраховувати та змінювати план харчування тварин та оновлювати інформацію про тварину. 
Роль відповідального за постачання включає в себе оформлення замовлень та поповнення вольєрів. Цей функціонал наведено на Use-Case діаграмі 3 (додаток А, A1, рис А3). 
Також функціонал адміністратора та послідовність його дій з тваринами можна побачити на діаграмі активності (додаток А,  рис А4). На цій діаграмі наведено можливі функції та дії адміна (директора) з тваринами: перегляд даних тварини, редагування, додавання та видалення планів харчування, хвороб, процедур, розхідних матеріалів. Для всіх змін адміністратору необхідно підтверджувати особистість за допомогою вводу паролю та пройти перевірку на рівень доступу.


1.3	Взаємодія між частинами системи


Взаємодія клієнтської частини з іншими частинами системи буде відбуватися через серверну частину, до якої будуть робитися HTTP-запити, а саме: GET, POST, PUT, DELETE. З серверної частини можуть повертатися дані у різному форматі: об’єкти – у JSON форматі, в якій серіалізуються отримані з бази даних об’єкти, повідомлення про успішне створення, редагування, видалення, оновлення даних – за допомогою різних кодів (основні – 401, 400, 404, 200, 500).  
В якості прикладу взаємодії було створено діаграму взаємодії на роботи адміністратора з працівниками(додаток А, рис. А5). На цій діаграмі можна докладніше поглянути на послідовність дій самої програми та як відбувається взаємодія з серверною частиною.
 
2	ПРОГРАМНА РЕАЛІЗАЦІЯ КЛІЄНТСЬКОЇ ЧАСТИНИ
2.1 Архітектура програмної системи


Клієнтська частина була розроблена на мові програмування С# за використанням технології розробки  ASP .NET MVC. В якості моделі в цій архітектури виступають класи, яки використовувались  у серверверній частини, тобто класи об’єктів (тварина, вольєр, сенсор, користувач і т. д.) та класи для обмеженого перегляду інформації, тобто класи DTO (data transfer object), які містять не всі поля класу, а тільки ті, що не містять вразливої інформації. Об’єкти DTO отримуються з сервера або передаються на нього (наприклад, при реєстрації та авторизації, отримання даних про працівників). В якості вида-сторінки (View) використовуються стандартні елементи – файли, в яких об’єднано HTML та C#, з розширенням .cshtml. Також для реалізації дизайну використовується бібліотека bootstrap. В якості контролера виступають класи-контроллери, тобто файли з C# кодом, які використовуються для створення та відкриття сторінок, збирання даних з форм (POST-методи), асинхроних запитів до серверної частини програмної системи. В системі реалізовано локалізацію англійською та українською, тобто змінюється мова інтерфейсу, формат дати, сама дата (при англійській – в форматі UTC, при український – час за Києвом), для чого до кожної сторінки сайту додано 2 файли ресурсів, в яких у вигляді ключа-значення знаходиться текст, що використовується на сторінках. Локалізація змінюється за допомогою випадаючого списку у заголовку кожної сторінки, з якого можна обрати необхідну мову.
Клієнтська частина взаємодіє з серверною за допомогою HTTP-запитів (GET, POST, PUT, DELETE).




2.2 Програмна розробка системи


Для організації додатку використовується стандартний шаблон для ASP .NET Web додатку, тобто папки контролерів, сторінок, ресурсів (для локалізації), моделей (класи об’єктів, що зберігаються у базі даних), View-моделей (класи, що використовуються у відображенні даних на сторінках), DTO для відправки або отримання даних серверу.
Для візуалізації взаємодії моделей (класів) між собою було розроблено діаграму компонентів (додаток А, рис. А4).
Для доступу до основного функціоналу системи, необхідно мати чітко визначену роль, що надається користувачеві адміністратором: адміністратор, лікар, завідуючий складом. Якщо у користувача не визначено ролі, то він автоматично стає гостем та немає доступу до функціоналу. 
При авторизації необхідно ввести пароль та пошту, які валідуються (умови валідації вказани у моделі View), для реєстрації першим кроком є теж саме, тобто спочатку потрібно зареєструватися як користувач, а потім – як працівник, ввевши більше даних про себе. Далі дані моделі направляються на сервер, який у разі успішної реєстрації/авторизації надає токен доступу (JWT-токен), та дані про роль користувача, які потів зберігаються у cookies сайту. Якщо користувач тільки зареєструвався, то роль йому повинен надавати адміністратор, що має відповідну сторінку для організації цього процесу.
Після авторизації користувачу надається меню з усіма можливостями, що відповідають його ролі (описано у розділі 1.1). Далі буде наведено декілька прикладів програмної реалізації системи.
На прикладі коду нижче наведено, як відбувається авторизація, вхід в систему:
1	[HttpPost]
2	public async Task<IActionResult> Login(LoginModel model)
3	{
4	    string error = await GetUser(model);
5	    model.error = error;
6	    if (!String.IsNullOrEmpty(res))
7	    {
8	        return View(model);
9	    }
10	        return RedirectToAction("Index", "Home");
11	    }

На цьому прикладі можна побачити, що це POST метод (рядок 1), тобто на сторінці входу користувачу необхідно заповнити форму та підтвердити її, після чого викликається цей метод. В рядку 4 викликається метод, що робить запит на сервер, для того, щоб перевірити, чи існує користувач в системі. В рядках 6-10 перевіряється, чи успішно авторизовано користувача, то він направляється на головну сторінку, в іншому випадку користувач залишається на сторінці авторизації та у формі показується повідомлення про помилку.
В методі було викликано метод Index контролеру Home:

1	 public async Task<IActionResult> Index()
2	 {
3	      var animals = await GetAnimals();
4	      return View(animals);

5	 }

В цьому методі викликається метод для отримання тварин (рядок 3) та перенаправлення на View з отриманим списком (рядок 4).
Код метода для отримання всіх тварин наведено в додатку А. По-перше, в цій функції використовується конструкція try-catch (рядки 16-24) для відстеження несподіваних помилок, таких, наприклад, як зупинена робота серверної частини. Далі використовується HTTP-клієнт (рядок 4), який є кастомізований (у заголовок додається токен доступу), створюється ендпоинт (url необхідного  методу на сервері) в рядку 5, який використовується для GET запиту (рядок 7). Запит повертає список тварин в JSON-форматі, тому при успішному запиті його відповідь необхідно десереалізувати. Для цього відповідь перетворюється в строку (рядок 11), після встановлюються опції для десеріалізації (рядки 12-14), які необхідні для правильного створення об’єкту. При помилці відправлення запиту створюється новий список та запам’ятовується помилка, яка буде виведена користувачеві (рядки 22-23). Інші сторінки працюють схожим чином: методи контролера роблять запити на сервер для отримання даних, які потім передаються на View. У разі помилки її текст запам’ятовується і виводиться на View користувачеві. Для відтворення графіків використовувалась бібліотека Highcharts.
	В системі є локалізація. Доступні 2 мови: англійська та українська. При виборі англійської мови температура відображається в Фаренгейтах, дата в форматі UTC та у вигляді рік-місяць-день. При виборі української мови, температура відображається у Цельсіях, дата за Києвом у форматі день-місяць-рік. 
	В додатку А також наведено метод для додавання нового плану харчування тварини в базу даних. Цей метод бере вписані користувачем дані з форми, перевіряє формат дати (час), якщо встановлена не англійська локалізація та переводить у такому випадку в UTC формат (рядки 4-10), після чого спочатку план серіалізується, а потім робиться POST-запит на сервер (рядок 19), при помилці створення користувач повертається до головну сторінку. 
	Також є функціонал для створення резервної копії даних, що при натисканні кнопки на сторінці робить запит на сервер, що повертає файл backup.bak та автоматично завантажує користувачеві. Приклад отримання наведено у додатку А.


2.3 Висновки


Впродовж цієї лабораторної роботи мною було розроблено клієнтську частину програмної системи управління притулком, описано архітектуру системи, програмну реалізацію, розроблено Use-Case діаграми, діаграми активності та взаємодії. 
 
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ


1.	Посилання на репозиторій:   https://github.com/NureLulakovaAnastasiia/apz-pzpi-21-2-lulakova-anastasiia/tree/main/Task4
2.	Посилання на відеозапис: https://youtu.be/vgzacLI7iVo  

